{"/home/travis/build/npmtest/node-npmtest-foscam/test.js":"/* istanbul instrument in package npmtest_foscam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foscam/lib.npmtest_foscam.js":"/* istanbul instrument in package npmtest_foscam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_foscam = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_foscam = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-foscam/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-foscam && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_foscam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_foscam\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_foscam.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_foscam.rollup.js'] =\n            local.assetsDict['/assets.npmtest_foscam.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_foscam.__dirname +\n                    '/lib.npmtest_foscam.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foscam/node_modules/foscam/foscam.js":"/*\nName:     nodejs-foscam\nSource:   https://github.com/fvdm/nodejs-foscam\nFeedback: https://github.com/fvdm/nodejs-foscam/issues\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n*/\n\nvar http = require('http'),\n    querystring = require('querystring'),\n    fs = require('fs'),\n    EventEmitter = require('events').EventEmitter\n\nvar app = new EventEmitter\n\n// defaults\napp.settings = {\n\thost:\t'192.168.1.239',\n\tport:\t81,\n\tuser:\t'admin',\n\tpass:\t''\n}\n\n// overrides\napp.setup = function( props, cb ) {\n\tfor( var key in props ) {\n\t\tapp.settings[ key ] = props[ key ]\n\t}\n\t\n\tif( typeof cb == 'function' ) {\n\t\tapp.status( cb )\n\t}\n}\n\n\n// status\napp.status = function( cb ) {\n\tapp.talk({\n\t\tpath:\t\t'get_status.cgi',\n\t\tcallback:\tfunction( data ) {\n\t\t\tvar result = {}\n\t\t\t\n\t\t\tdata = data.split('\\n')\n\t\t\tfor( var d in data ) {\n\t\t\t\tif( data[d] != '' ) {\n\t\t\t\t\tvar line = data[d].split('var ')\n\t\t\t\t\tline = String(line[1]).split('=')\n\t\t\t\t\tline[1] = String(line[1]).replace( /;$/, '' )\n\t\t\t\t\tresult[ line[0] ] = line[1].substr(0,1) == '\\'' ? line[1].substr(1, line[1].length -2) : line[1]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif( result.alarm_status ) {\n\t\t\t\tswitch( result.alarm_status ) {\n\t\t\t\t\tcase '0': result.alarm_status_str = 'no alarm'; break\n\t\t\t\t\tcase '1': result.alarm_status_str = 'motion alarm'; break\n\t\t\t\t\tcase '2': result.alarm_status_str = 'input alarm'; break\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif( result.ddns_status ) {\n\t\t\t\tswitch( result.ddns_status ) {\n\t\t\t\t\tcase '0': result.ddns_status_str = 'No Action'; break\n\t\t\t\t\tcase '1': result.ddns_status_str = 'It\\'s connecting...'; break\n\t\t\t\t\tcase '2': result.ddns_status_str = 'Can\\'t connect to the Server'; break\n\t\t\t\t\tcase '3': result.ddns_status_str = 'Dyndns Succeed'; break\n\t\t\t\t\tcase '4': result.ddns_status_str = 'DynDns Failed: Dyndns.org Server Error'; break\n\t\t\t\t\tcase '5': result.ddns_status_str = 'DynDns Failed: Incorrect User or Password'; break\n\t\t\t\t\tcase '6': result.ddns_status_str = 'DynDns Failed: Need Credited User'; break\n\t\t\t\t\tcase '7': result.ddns_status_str = 'DynDns Failed: Illegal Host Format'; break\n\t\t\t\t\tcase '8': result.ddns_status_str = 'DynDns Failed: The Host Does not Exist'; break\n\t\t\t\t\tcase '9': result.ddns_status_str = 'DynDns Failed: The Host Does not Belong to You'; break\n\t\t\t\t\tcase '10': result.ddns_status_str = 'DynDns Failed: Too Many or Too Few Hosts'; break\n\t\t\t\t\tcase '11': result.ddns_status_str = 'DynDns Failed: The Host is Blocked for Abusing'; break\n\t\t\t\t\tcase '12': result.ddns_status_str = 'DynDns Failed: Bad Reply from Server'; break\n\t\t\t\t\tcase '13': result.ddns_status_str = 'DynDns Failed: Bad Reply from Server'; break\n\t\t\t\t\tcase '14': result.ddns_status_str = 'Oray Failed: Bad Reply from Server'; break\n\t\t\t\t\tcase '15': result.ddns_status_str = 'Oray Failed: Incorrect User or Password'; break\n\t\t\t\t\tcase '16': result.ddns_status_str = 'Oray Failed: Incorrect Hostname'; break\n\t\t\t\t\tcase '17': result.ddns_status_str = 'Oray Succeed'; break\n\t\t\t\t\tcase '18': result.ddns_status_str = 'Reserved'; break\n\t\t\t\t\tcase '19': result.ddns_status_str = 'Reserved'; break\n\t\t\t\t\tcase '20': result.ddns_status_str = 'Reserved'; break\n\t\t\t\t\tcase '21': result.ddns_status_str = 'Reserved'; break\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif( result.upnp_status ) {\n\t\t\t\tswitch( result.upnp_status ) {\n\t\t\t\t\tcase '0': result.upnp_status_str = 'No Action'; break\n\t\t\t\t\tcase '1': result.upnp_status_str = 'Succeed'; break\n\t\t\t\t\tcase '2': result.upnp_status_str = 'Device System Error'; break\n\t\t\t\t\tcase '3': result.upnp_status_str = 'Errors in Network Communication'; break\n\t\t\t\t\tcase '4': result.upnp_status_str = 'Errors in Chat with UPnP Device'; break\n\t\t\t\t\tcase '5': result.upnp_status_str = 'Rejected by UPnP Device, Maybe Port Conflict'; break\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcb( result )\n\t\t}\n\t})\n}\n\n\n// camera params\napp.camera_params = function( cb ) {\n\tapp.talk({\n\t\tpath:\t\t'get_camera_params.cgi',\n\t\tcallback:\tfunction( data ) {\n\t\t\tvar result = {}\n\t\t\tdata.replace( /var ([^=]+)=([^;]+);/g, function( str, key, value ) {\n\t\t\t\tresult[ key ] = parseInt( value )\n\t\t\t})\n\t\t\tcb( result )\n\t\t}\n\t})\n}\n\n\n// Presets\napp.preset = {\n  id2cmd: function( action, id ) {\n    var cmds = {\n      set: [30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60],\n      go: [31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61]\n    }\n    return cmds[ action ][ id-1 ]\n  },\n  \n  set: function( id, cb ) {\n    app.control.decoder( app.preset.id2cmd( 'set', id ), cb )\n  },\n  \n  go: function( id, cb ) {\n    app.control.decoder( app.preset.id2cmd( 'go', id ), cb )\n  }\n}\n\n\n// control\napp.control = {\n\t\n\t// pan/tilt\n\tdecoder: function( cmd, cb ) {\n\t\t\n\t\tif( typeof cmd == 'string' && !cmd.match( /^[0-9]+$/ ) ) {\n\t\t\tswitch( cmd ) {\n\t\t\t\tcase 'up':                      cmd = 0; break\n\t\t\t\tcase 'stop up':                 cmd = 1; break\n\t\t\t\tcase 'down':                    cmd = 2; break\n\t\t\t\tcase 'stop down':               cmd = 3; break\n\t\t\t\tcase 'left':                    cmd = 4; break\n\t\t\t\tcase 'stop left':               cmd = 5; break\n\t\t\t\tcase 'right':                   cmd = 6; break\n\t\t\t\tcase 'stop right':              cmd = 7; break\n\t\t\t\tcase 'center':                  cmd = 25; break\n\t\t\t\tcase 'vertical patrol':         cmd = 26; break\n\t\t\t\tcase 'stop vertical patrol':    cmd = 27; break\n\t\t\t\tcase 'horizontal patrol':       cmd = 28; break\n\t\t\t\tcase 'stop horizontal patrol':  cmd = 29; break\n\t\t\t\tcase 'io output high':          cmd = 94; break\n\t\t\t\tcase 'io output low':           cmd = 95; break\n\t\t\t}\n\t\t}\n\t\t\n\t\tapp.talk({\n\t\t\tpath:\t\t'decoder_control.cgi',\n\t\t\tfields:\t\t{ command: cmd },\n\t\t\tcallback:\tcb\n\t\t})\n\t},\n\t\n\t// camera settings\n\tcamera: function( param, value, cb ) {\n\t\t\n\t\t// fix param\n\t\tif( typeof param == 'string' && !param.match( /^[0-9]+$/ ) ) {\n\t\t\tswitch( param ) {\n\t\t\t\t\n\t\t\t\tcase 'brightness':         param = 1; break\n\t\t\t\tcase 'contrast':           param = 2; break\n\t\t\t\t\n\t\t\t\t// resolution\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tparam = 0\n\t\t\t\t\tif( typeof value == 'string' && !value.match( /^[0-9]{1,2}$/ ) ) {\n\t\t\t\t\t\tswitch( value ) {\n\t\t\t\t\t\t\tcase '320':\n\t\t\t\t\t\t\tcase '320x240':\n\t\t\t\t\t\t\tcase '320*240':\n\t\t\t\t\t\t\t\tvalue = 8\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase '640':\n\t\t\t\t\t\t\tcase '640x480':\n\t\t\t\t\t\t\tcase '640*480':\n\t\t\t\t\t\t\t\tvalue = 32\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tcase 'mode':\n\t\t\t\t\tparam = 3\n\t\t\t\t\tif( typeof value == 'string' && !value.match( /^[0-9]$/ ) ) {\n\t\t\t\t\t\tswitch( value.toLowerCase() ) {\n\t\t\t\t\t\t\tcase '50':\n\t\t\t\t\t\t\tcase '50hz':\n\t\t\t\t\t\t\tcase '50 hz':\n\t\t\t\t\t\t\t\tvalue = 0\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase '60':\n\t\t\t\t\t\t\tcase '60hz':\n\t\t\t\t\t\t\tcase '60 hz':\n\t\t\t\t\t\t\t\tvalue = 1\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'outdoor':\n\t\t\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\t\t\tvalue = 2\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\tcase 'flipmirror':\n\t\t\t\t\tparam = 5\n\t\t\t\t\tif( typeof value == 'string' && !value.match( /^[0-9]$/ ) ) {\n\t\t\t\t\t\tswitch( value.toLowerCase() ) {\n\t\t\t\t\t\t\tcase 'default':\n\t\t\t\t\t\t\t\tvalue = 0\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'flip':\n\t\t\t\t\t\t\t\tvalue = 1\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\t\t\tvalue = 2\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'flipmirror':\n\t\t\t\t\t\t\tcase 'flip&mirror':\n\t\t\t\t\t\t\tcase 'flip+mirror':\n\t\t\t\t\t\t\tcase 'flip + mirror':\n\t\t\t\t\t\t\tcase 'flip & mirror':\n\t\t\t\t\t\t\t\tvalue = 3\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t\n\t\t// send it\n\t\tapp.talk({\n\t\t\tpath:\t\t'camera_control.cgi',\n\t\t\tfields: {\n\t\t\t\tparam:\tparam,\n\t\t\t\tvalue:\tvalue\n\t\t\t},\n\t\t\tcallback:\tcb\n\t\t})\n\t\t\n\t}\n\t\n}\n\n\n// reboot\napp.reboot = function( cb ) {\n\tapp.talk({\n\t\tpath:\t\t'reboot.cgi',\n\t\tcallback:\tcb\n\t})\n}\n\n\n// restore factory\napp.restore_factory = function( cb ) {\n\tapp.talk({\n\t\tpath:\t\t'restore_factory.cgi',\n\t\tcallback:\tcb\n\t})\n}\n\n\n// params\napp.params = function( cb ) {\n\tapp.talk({\n\t\tpath:\t\t'get_params.cgi',\n\t\tcallback:\tcb\n\t})\n}\n\n\n// set\napp.set = {\n\t\n\t// alias\n\talias: function( alias, cb ) {\n\t\tapp.talk({\n\t\t\tpath:\t\t'set_alias.cgi',\n\t\t\tfields:\t\t{ alias: alias },\n\t\t\tcallback:\tcb\n\t\t})\n\t},\n\t\n\t// datetime\n\tdatetime: function( props, cb ) {\n\t\tapp.talk({\n\t\t\tpath:\t\t'set_datetime.cgi',\n\t\t\tfields:\t\tprops,\n\t\t\tcallback:\tcb\n\t\t})\n\t}\n\t\n}\n\n\n// snapshot\napp.snapshot = function( filepath, cb ) {\n\tif( !cb && typeof filepath == 'function' ) {\n\t\tvar cb = filepath\n\t\tvar filepath = false\n\t}\n\t\n\tapp.talk({\n\t\tpath:\t\t'snapshot.cgi',\n\t\tencoding:\t'binary',\n\t\tcallback:\tfunction( bin ) {\n\t\t\tif( filepath ) {\n\t\t\t\tfs.writeFile( filepath, bin, 'binary', function( err ) {\n\t\t\t\t\tif( err ) {\n\t\t\t\t\t\tthrow err\n\t\t\t\t\t\tcb( false )\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb( filepath )\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tcb( bin )\n\t\t\t}\n\t\t}\n\t})\n}\n\n\n// communicate\napp.talk = function( props ) {\n\t\n\tif( !props.fields ) {\n\t\tprops.fields = {}\n\t}\n\t\n\tprops.fields.user = app.settings.user\n\tprops.fields.pwd = app.settings.pass\n\tpath = '/'+ props.path +'?'+ querystring.stringify( props.fields )\n\t\n\t// connect\n\tvar req = http.request({\n\t\t\n\t\thost:\t\tapp.settings.host,\n\t\tport:\t\tapp.settings.port,\n\t\tpath:\t\tpath,\n\t\tmethod:\t\t'GET'\n\t\t\n\t}, function( response ) {\n\t\t\n\t\t// response\n\t\tresponse.setEncoding( props.encoding ? props.encoding : 'utf8' )\n\t\tvar data = ''\n\t\t\n\t\tresponse.on( 'data', function( chunk ) { data += chunk })\n\t\tresponse.on( 'end', function() {\n\t\t\t\n\t\t\tif( typeof props.callback == 'function' ) {\n\t\t\t\tdata = data.trim()\n\t\t\t\tprops.callback( data )\n\t\t\t}\n\t\t\t\n\t\t})\n\t\t\n\t})\n\t\n\t// fail\n\treq.on( 'error', function( err ) {\n\t\tapp.emit( 'connection-error', err )\n\t})\n\t\n\t// disconnect\n\treq.end()\n\t\n}\n\n// ready\nmodule.exports = app"}